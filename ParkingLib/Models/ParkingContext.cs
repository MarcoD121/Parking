// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ParkingLib.Models;

/// <summary>
/// The class that holds the connection to the database
/// </summary>
public partial class ParkingContext : DbContext
{
    /// <summary>
    /// The table EndedParkedVehicles in the database
    /// </summary>
    public virtual DbSet<EndedParkedVehicle> EndedParkedVehicles { get; set; }

    /// <summary>
    /// The table ParkedVehicles in the database
    /// </summary>
    public virtual DbSet<ParkedVehicle> ParkedVehicles { get; set; }

    /// <summary>
    /// The table TimeForEndedVehicles in the database
    /// </summary>
    public virtual DbSet<TimeForEndedVehicle> TimeForEndedVehicles { get; set; }

    /// <summary>
    /// The table TimeForParkedVehicles in the database
    /// </summary>
    public virtual DbSet<TimeForParkedVehicle> TimeForParkedVehicles { get; set; }

    /// <summary>
    /// Creates a default instance of the class
    /// </summary>
    public ParkingContext()
    {

    }

    /// <summary>
    /// Create an instance of the class
    /// </summary>
    /// <param name="options">adds default options inherited from the base dbcontext containing helping methods</param>
    public ParkingContext(DbContextOptions<ParkingContext> options)
        : base(options)
    {
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(Secret.ConnectionString);
        }
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<EndedParkedVehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__EndedPar__CE6D7C95C597C5C4");

            entity.Property(e => e.VehicleId).HasColumnName("Vehicle_Id");
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EndedParkedId).HasColumnName("EndedParked_Id");
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Make)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.EndedParked).WithMany(p => p.EndedParkedVehicles)
                .HasForeignKey(d => d.EndedParkedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__EndedPark__Ended__2FCF1A8A");
        });

        modelBuilder.Entity<ParkedVehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__ParkedVe__CE6D7C9556A6FD58");

            entity.Property(e => e.VehicleId).HasColumnName("Vehicle_Id");
            entity.Property(e => e.ActiveParkedId).HasColumnName("ActiveParked_Id");
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Make)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.ActiveParked).WithMany(p => p.ParkedVehicles)
                .HasForeignKey(d => d.ActiveParkedId)
                .OnDelete(DeleteBehavior.ClientCascade)
                .HasConstraintName("FK__ParkedVeh__Activ__2CF2ADDF");
        });

        modelBuilder.Entity<TimeForEndedVehicle>(entity =>
        {
            entity.HasKey(e => e.EndedParkedId).HasName("PK__TimeForE__D2B9BC5ED11C9883");

            entity.Property(e => e.EndedParkedId).HasColumnName("EndedParked_Id");
            entity.Property(e => e.TimeEnded).HasColumnType("datetime");
            entity.Property(e => e.TimeStarted).HasColumnType("datetime");
            entity.Property(e => e.TotalTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TimeForParkedVehicle>(entity =>
        {
            entity.HasKey(e => e.ActiveParkedId).HasName("PK__TimeForP__9774E10531C9BE82");

            entity.Property(e => e.ActiveParkedId).HasColumnName("ActiveParked_Id");
            entity.Property(e => e.TimeStarted).HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}